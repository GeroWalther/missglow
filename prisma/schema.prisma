// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("MONGO_DB")
// }

// model User {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String   @unique
//   name    String?
//   address Address?
//   isAdmin Boolean  @default(false)
//   orders  Order[]
// }

// type Address {
//   street  String
//   city    String
//   state   String
//   zip     String
//   country String
// }

// model Order {
//   id               String           @id @default(auto()) @map("_id") @db.ObjectId
//   pricePaidInCents Float
//   customerId       String           @db.ObjectId
//   customer         User             @relation(fields: [customerId], references: [id], onDelete: Cascade)
//   createdAt        DateTime         @default(now())
//   updatedAt        DateTime         @updatedAt
//   orderedProducts  OrderedProduct[]
//   hasBeenShipped   Boolean          @default(false)
// }

// model Product {
//   id                     String           @id @default(auto()) @map("_id") @db.ObjectId
//   name                   String
//   priceInCents           Float
//   imageUrl               String[]
//   quantity               Int
//   description            String
//   isAvailableForPurchase Boolean          @default(true)
//   createdAt              DateTime         @default(now())
//   updatedAt              DateTime         @updatedAt
//   orderedProducts        OrderedProduct[]
// }

// model OrderedProduct {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   orderId   String  @db.ObjectId
//   productId String  @db.ObjectId
//   order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   quantity  Int
// }generator client 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  street    String?
  city      String?
  state     String?
  zip       String?
  country   String?
  isAdmin   Boolean  @default(false)
  orders    Order[]
}

model Order {
  id               Int              @id @default(autoincrement())
  pricePaidInCents Float
  customerId       Int
  customer         User             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  orderedProducts  OrderedProduct[]
  hasBeenShipped   Boolean          @default(false)
}

model Product {
  id                     Int              @id @default(autoincrement())
  name                   String
  priceInCents           Float
  description            String
  isAvailableForPurchase Boolean          @default(true)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @default(now())
  orderedProducts        OrderedProduct[]
  images                 ProductImage[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderedProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
}
